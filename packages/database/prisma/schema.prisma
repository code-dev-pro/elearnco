datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "../../schemas/zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
 // imports               = null
  prismaJsonNullability = true
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  TEACHER
  ADMIN
  LEARNER
  TRAINER
}

model PreregisteredUser{
   id                      String                   @id @default(cuid())
   email                   String?                  @unique
   locale                  String?
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           DateTime?
  password                String
  image                   String?
  locale                  String?
  createdAt               DateTime                 @default(now())
  lastActivityAt          DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  Folder                  Folder[]
  Course                  Course[]
  Learner                 Learner[]
  Collaborator            Collaborator[]
  passwordResetTokens     PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  accounts                Account[]
  sessions                Session[]
  role                    Role                     @default(TEACHER)
  author                  Author[]
 
}

model Collaborator {
  id        String   @id @default(cuid())
  email     String?  @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Learner {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  email     String?  @unique
  userId    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

/// Used to validate user email address to reset its password
model PasswordResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  /// Hexadecimal version of the hashed token
  token     String   @unique
  expiresAt DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

/// Used to verify user email address
model EmailVerificationToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  /// Hexadecimal version of the hashed token
  token     String   @unique
  expiresAt DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  code      String   @unique

  @@unique([userId, token, code])
}

model Folder {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Course    Course[]
}
enum CourseType {
  CLASSIC
  LIVE
  WORK
}
enum CourseStatus {
  DRAFT
  ARCHIVED
  ACTIVE
}
enum CourseMode {
  PUBLIC
  PRIVATE
}
model Author {
  id        String   @id @default(cuid())
  image     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  role      Role     @default(TEACHER)
  name      String?
  Course    Course[]
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
  
}

model Image {
  id        String   @id @default(cuid())
  image     String
  alt       String
  x         String?
  y         String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
}

model Course {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  folder      Folder?      @relation(fields: [folderId], references: [id])
  folderId    String?
  status      CourseStatus @default(ACTIVE)
  type        CourseType   @default(CLASSIC)
  mode        CourseMode   @default(PRIVATE)
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  author      Author       @relation(fields: [authorId], references: [id])
  authorId    String
  image       String
  pages       Page[]
}
enum PageStatus {
  DRAFT
  VALID
}
model Page {
  id String @id @default(cuid())
  index Int
  status PageStatus @default(DRAFT)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  blocks Block[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
model Block {
  id String @id @default(cuid())
  type String
  uuid String
  groupId String
  content Json
  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  index Int

 
}